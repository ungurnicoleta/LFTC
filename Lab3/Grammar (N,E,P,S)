Grammar (N,E,P,S)

(N) Nonterminals:

	program
	compound_statement
	statement_list
	statement
	declaration
	assignment
	return 
	io_statement
	loop 
	if_statement
	var_declaration
	array_declaration
	struct_declaration
	type
	var_assignment
	array_assignment
	struct_assignment
	expr
	input
	output
	identifier
	condition
	special_symbol
	letter
	sign
	digit
	non_zero_digit
	non_zero_natural_number
	natural_number
	integer
	real_number
	character
	string
	constant
	operator
	relational_operator


(E) Terminals:
	0 1 2 3 ... 36

(P) Productions:
	program -> compound_statement
	compound_statement -> 29.statement_list.30
	statement_list -> statement.14 | statement.14.statement_list
	statement -> declaration | assignment | return | io_statement | loop | if_statement
	declaration -> var_declaration| array_declaration | struct_declaration
	assignment -> var_assignment | array_assignment | struct_assignment
	return -> 13.expr.14
	io_statement = input | output
	loop -> 2.31.condition.compound_statement
	if_statement -> 10.31.condition.32.compound_statement | 10.31.condition.32.compound_statement.11.compound_statement
	var_declaration -> type.0.14
	array_declaration -> 6.28.type.36.non_zero_natural_number.27.0.14
	struct_declaration -> 7.0.14
	var_assignment -> 0.15.expr
	array_assignment ->0.28.natural_number.27.15.expr
	expr -> 0 | 1 | expr.operator.expr
	input -> 8.31.0.32.14
	output -> 9.31.expr.32.14
	condition -> expr.relation_operator.expr
	type -> 2 | 3 | 4 | 5
	constant -> character | integer | real_number | string
	operator -> 16 | 17 | 24 | 25 | 26
	relational_operator -> 18 | 19  | 20 | 21 | 22 | 23

(S) Starting symbol: S


//Codification
identifier -> 0
constant -> 1
int -> 2
float -> 3
char -> 4
string -> 5
array -> 6
struct -> 7
scanf -> 8
printf -> 9
if -> 10
else -> 11
while -> 12
return -> 13
; -> 14
= -> 15
+ -> 16
- -> 17
== -> 18
!= -> 19
< -> 20
> -> 21
<= -> 22
>= -> 23
/ -> 24
* -> 25
% -> 26
] -> 27
[ -> 28
{ -> 29
} -> 30
( -> 31
) -> 32
. -> 33
" -> 34
' -> 35
, -> 36



1b2b

